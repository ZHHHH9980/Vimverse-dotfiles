{
  "vim.timeout": 500,
  "vim.leader": " ",
  "vim.sneak": true,
  "vim.surround": true,
  // Enable system clipboard integration (uses * register) for yanking and pasting
  "vim.useSystemClipboard": true,
  "vim.replaceWithRegister": true,
  "vim.easymotion": true,
  "vim.easymotionMarkerBackgroundColor": "blue",
  "vim.easymotionMarkerForegroundColorOneChar": "white",
  "vim.insertModeKeyBindings": [
    /*
     * Key: j k
     * Description: Exit insert mode using jk sequence
     */
    {
      "before": [
        "j",
        "k"
      ],
      "after": [
        "<Esc>"
      ]
    },
    /*
     * Key: k j
     * Description: Exit insert mode using kj sequence
     */
    {
      "before": [
        "k",
        "j"
      ],
      "after": [
        "<Esc>"
      ]
    }
  ],
  "vim.insertModeKeyBindingsNonRecursive": [
    // im<Space> -> import
    {
      "before": ["i", "m", "<space>"],
      "after": ["i", "m", "p", "o", "r", "t"]
    },

    // co<Space> -> const
    {
      "before": ["c", "o", "<space>"],
      "after": ["c", "o", "n", "s", "t"]
    },

    // rn<Space> -> return
    {
      "before": ["r", "n", "<Space>"],
      "after": ["r", "e", "t", "u", "r", "n"]
    },

    // ex<Space>  -> export
    {
      "before": ["e", "x", "<Space>"],
      "after": ["e", "x", "p", "o", "r", "t"]
    },
    // de<Space> -> default
    {
      "before": ["d", "e", "<Space>"],
      "after": ["d", "e", "f", "a", "u", "l", "t"]
    },
    /*
     * Key: . l o g
     * Description: Expand to console.log template with placeholders
     * Flow:
     * 1. Exit insert mode
     * 2. Visual select to line start
     * 3. Insert console.log template
     * 4. Position cursor at message placeholder
     */
    {
      "before": [
        ".",
        "l",
        "o",
        "g"
      ],
      "after": [
        "<Esc>",
        "v",
        "^",
        "\"",
        "a",
        "d",
        "a",
        "c",
        "o",
        "n",
        "s",
        "o",
        "l",
        "e",
        ".",
        "l",
        "o",
        "g",
        "(",
        "'",
        "<Esc>",
        "\"",
        "a",
        "p",
        "l",
        "a",
        ",",
        "<Esc>",
        "\"",
        "a",
        "p"
      ]
    }
  ],
  "vim.visualModeKeyBindings": [],
  "vim.visualModeKeyBindingsNonRecursive": [
    /* --- Module: Movement --- */
    /*
     * Key: k
     * Description: Remap k to j for üîΩ movement
     */
    {
      "before": [
        "k"
      ],
      "after": [
        "j"
      ]
    },
    /*
     * Key: i
     * Description: Remap i to k for üîº movement
     */
    {
      "before": [
        "i"
      ],
      "after": [
        "k"
      ]
    },
    /*
     * Key: j
     * Description: Remap j to h for ‚óÄÔ∏è movement
     */
    {
      "before": [
        "j"
      ],
      "after": [
        "h"
      ]
    },
    /*
     * Key: K
     * Description: Super-jump üîΩ (12 lines)
     */
    {
      "before": [
        "K"
      ],
      "after": [
        "j",
        "j",
        "j",
        "j",
        "j",
        "j",
        "j",
        "j",
        "j",
        "j",
        "j",
        "j"
      ]
    },
    /*
     * Key: I
     * Description: Super-jump üîº (12 lines)
     */
    {
      "before": [
        "I"
      ],
      "after": [
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k"
      ]
    },
    /*
     * Key: J
     * Description: Remap J ‚Üí 0 (start of line)
     */
    {
      "before": [
        "J"
      ],
      "after": [
        "0"
      ]
    },
    /*
     * Key: L
     * Description: Remap L ‚Üí $h (end of line)
     */
    {
      "before": [
        "L"
      ],
      "after": [
        "$",
        "h"
      ]
    },
    /* --- Module: Comment --- */
    /*
     * Key: g b c
     * Description: Toggle block comment
     */
    {
      "before": [
        "g",
        "b",
        "c"
      ],
      "commands": [
        "editor.action.blockComment"
      ]
    },
    /* --- Module: Plugin --- */
    /*
     * Key: gc
     * Description: Toggle line comment for the current line or selection (already support in VSCODEVIM)
     * Module: Comment
     */
    /*  <-----  Module: Comment [End] ------> */
    /*  <-----  Module: Plugin [Start] ------> */
    /*
     * Key: <leader> + w
     * Description: Open Whichkey menu
     * Plugin: Whichkey
     */
    {
      "before": [
        "<leader>",
        "w"
      ],
      "commands": [
        "whichkey.show"
      ]
    },
    /*
     * Key: W
     * Description: Open WhichKey menu (alternative)
     * Plugin: WhichKey
     */
    {
      "before": [
        "W"
      ],
      "commands": [
        "whichkey.show"
      ]
    },
    /*
     * Key: r
     * Description: Replace with register [a]
     * Plugin: ReplaceWithRegister
     */
    {
      "before": [
        "r"
      ],
      "after": [
        "\"",
        "a",
        "g",
        "r"
      ]
    },
    /* --- Module: CRUD --- */
    /*
     * Key: y
     * Description: Yank to register [a]
     */
    {
      "before": [
        "y"
      ],
      "after": [
        "\"",
        "a",
        "y"
      ]
    },
    /*
     * Key: d
     * Description: Delete to blackhole register
     */
    {
      "before": [
        "d"
      ],
      "after": [
        "\"",
        "_",
        "d"
      ]
    },
    /*
     * Key: n d
     * Description: Delete to register [a]
     */
    {
      "before": [
        "n",
        "d"
      ],
      "after": [
        "\"",
        "a",
        "d"
      ]
    },
    /*
     * Key: c
     * Description: Cut to blackhole register
     */
    {
      "before": [
        "c"
      ],
      "after": [
        "\"",
        "_",
        "c"
      ]
    },
    /*
     * Key: n c
     * Description: Cut to register [a]
     */
    {
      "before": [
        "n",
        "c"
      ],
      "after": [
        "\"",
        "a",
        "c"
      ]
    }
  ],
  "vim.normalModeKeyBindings": [],
  "vim.normalModeKeyBindingsNonRecursive": [
    /* --- Module: Movement --- */
    /*
     * Key: k
     * Description: Move down (j)
     */
    {
      "before": [
        "k"
      ],
      "after": [
        "j"
      ]
    },
    /*
     * Key: i
     * Description: Move üîº (k)
     */
    {
      "before": [
        "i"
      ],
      "after": [
        "k"
      ]
    },
    /*
     * Key: j
     * Description: Move left (h)
     */
    {
      "before": [
        "j"
      ],
      "after": [
        "h"
      ]
    },
    /*
     * Key: K
     * Description: Jump down 12 lines
     */
    {
      "before": [
        "K"
      ],
      "after": [
        "j",
        "j",
        "j",
        "j",
        "j",
        "j",
        "j",
        "j",
        "j",
        "j",
        "j",
        "j"
      ]
    },
    /*
     * Key: I
     * Description: Jump up üîΩ lines (kkkkkkkkkkkk)
     * Why this Design: Enhance the normal j(üîΩ)
     * Module: Movement
     */
    {
      "before": [
        "I"
      ],
      "after": [
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k",
        "k"
      ]
    },
    /*
     * Key: H
     * Description: Jump to start of line (0)
     * Why this Design: Enhance the normal j(üîΩ)
     * Module: Movement
     */
    {
      "before": [
        "H"
      ],
      "after": [
        "0"
      ]
    },
    /*
     * Key: J
     * Description: Insert at line start (I)
     */
    {
      "before": [
        "J"
      ],
      "after": [
        "I"
      ]
    },
    /*
     * Key: h
     * Description: Map h ‚Üí insert mode (i)
     * Why this design: j left-movement key is (h)
     */
    {
      "before": [
        "h"
      ],
      "after": [
        "i"
      ]
    },
    /*
     * Key: L
     * Description: Insert at line end (A)
     * Why this design: Since lowercase l moves right, uppercase L naturally extends to end-of-line insertion
     */
    {
      "before": [
        "L"
      ],
      "after": [
        "A"
      ]
    },
    /* --- Module: Navigation --- */
    /*
     * Key: <leader> a
     * Description: Jump to mark [a]
     */
    {
      "before": [
        "<leader>",
        "a"
      ],
      "after": [
        "`",
        "a"
      ]
    },
    /*
     * Key: g r
     * Description: Find references
     */
    {
      "before": [
        "g",
        "r"
      ],
      "commands": [
        "editor.action.referenceSearch.trigger"
      ]
    },
    /*
     * Key: g f
     * Description: Quick file open
     * Command: workbench.action.quickOpen
     */
    {
      "before": [
        "g",
        "f"
      ],
      "commands": [
        "workbench.action.quickOpen"
      ]
    },
    /*
     * Key: g g
     * Description: Set mark [a] (side effect) then jump to file start
     * Module: Navigation
     */
    {
      "before": [
        "g",
        "g"
      ],
      "after": [
        "m",
        "a",
        "g",
        "g"
      ]
    },
    /*
     * Key: g [
     * Description: Jump to next error/warning (marker)
     * Module: Navigation
     */
    {
      "before": [
        "g",
        "["
      ],
      "commands": [
        "editor.action.marker.next"
      ]
    },
    /*
     * Key: g ]
     * Description: Jump to previous error/warning (marker)
     * Module: Navigation
     */
    {
      "before": [
        "g",
        "]"
      ],
      "commands": [
        "editor.action.marker.prev"
      ]
    },
    /*
     * Key: g h
     * Description: Show hover info
     * Module: Navigation
     */
    {
      "before": [
        "g",
        "h"
      ],
      "commands": [
        "editor.action.showHover"
      ]
    },
    /*
     * Key: G
     * Description: Set mark [a] (side effect) then jump to file end
     * Module: Navigation
     */
    {
      "before": [
        "G"
      ],
      "after": [
        "m",
        "a",
        "G"
      ]
    },
    /*
     * Key: E
     * Description: Previous tab (gT)
     */
    {
      "before": [
        "E"
      ],
      "after": [
        "g",
        "T"
      ]
    },
    /*
     * Key: R
     * Description: Next tab (gt)
     */
    {
      "before": [
        "R"
      ],
      "after": [
        "g",
        "t"
      ]
    },
    /* --- Module: CRUD --- */
    /* Yank/Delete/Cut/Paste operations */
    /*
     * Key: P
     * Description: Yank to register [a]
     */
    {
      "before": [
        "P"
      ],
      "after": [
        "\"",
        "*",
        "p"
      ]
    },
    /*
     * Key: y
     * Description: Yank to register [a]
     */
    {
      "before": [
        "y"
      ],
      "after": [
        "\"",
        "a",
        "y"
      ]
    },
    /*
     * Key: c
     * Description: Cut to blackhole register
     */
    {
      "before": [
        "c"
      ],
      "after": [
        "\"",
        "_",
        "c"
      ]
    },
    /*
     * Key: C
     * Description: Cut line to blackhole register
     */
    {
      "before": [
        "C"
      ],
      "after": [
        "\"",
        "_",
        "C"
      ]
    },
    /*
     * Key: n c
     * Description: Cut to register [a]
     * Module: CRUD
     */
    {
      "before": [
        "n",
        "c"
      ],
      "after": [
        "\"",
        "a",
        "c"
      ]
    },
    /*
     * Key: n C
     * Description: Cut line to register [a]
     */
    {
      "before": [
        "n",
        "C"
      ],
      "after": [
        "\"",
        "a",
        "C"
      ]
    },
    /*
     * Key: d
     * Description: Delete to blackhole register
     */
    {
      "before": [
        "d"
      ],
      "after": [
        "\"",
        "_",
        "d"
      ]
    },
    /*
     * Key: n d
     * Description: Delete to register [a]
     */
    {
      "before": [
        "n",
        "d"
      ],
      "after": [
        "\"",
        "a",
        "d"
      ]
    },
    /*
     * Key: d d
     * Description: Delete line to blackhole register
     */
    {
      "before": [
        "d",
        "d"
      ],
      "after": [
        "\"",
        "_",
        "d",
        "d"
      ]
    },
    /*
     * Key: n d d
     * Description: Delete line to register [a]
     */
    {
      "before": [
        "n",
        "d",
        "d"
      ],
      "after": [
        "\"",
        "a",
        "d",
        "d"
      ]
    },
    /*
     * Key: p
     * Description: Paste from register [a]
     */
    {
      "before": [
        "p"
      ],
      "after": [
        "\"",
        "a",
        "p"
      ]
    },
    /* --- Module: Plugin --- */
    /*
     * Key: W
     * Description: Show WhichKey menu
     * Plugin: WhichKey
     */
    {
      "before": [
        "W"
      ],
      "commands": [
        "whichkey.show"
      ]
    },
    /*
     * Key: <leader> w
     * Description: Show WhichKey menu (alternate)
     * Plugin: WhichKey
     */
    {
      "before": [
        "<leader>",
        "w"
      ],
      "commands": [
        "whichkey.show"
      ]
    },
    /*
     * Key: r
     * Description: Replace with register [a]
     */
    {
      "before": [
        "r"
      ],
      "after": [
        "\"",
        "a",
        "g",
        "r"
      ]
    },
    /* Easymotion integration */
    /*
     * Key: S
     * Description: Activate Easymotion search
     * Plugin: Easymotion
     */
    {
      "before": [
        "S"
      ],
      "after": [
        "<leader>",
        "<leader>",
        "s"
      ]
    },
    /*
     * Key: <leader> s
     * Description: Alternative Easymotion trigger
     * Plugin: Easymotion
     */
    {
      "before": [
        "<leader>",
        "s"
      ],
      "after": [
        "<leader>",
        "<leader>",
        "s"
      ]
    },
    /* Special line operations */
    /*
     * Key: d L
     * Description: Delete to end of line
     */
    {
      "before": [
        "d",
        "L"
      ],
      "after": [
        "d",
        "$"
      ]
    },
    /*
     * Key: d J
     * Description: Delete to line start
     */
    {
      "before": [
        "d",
        "J"
      ],
      "after": [
        "d",
        "^"
      ]
    }
  ],
  "whichkey.bindings": [
    {
      "key": " ",
      "name": "Commands",
      "type": "command",
      "command": "workbench.action.showCommands"
    },
    {
      "key": "?",
      "name": "Search keybindings",
      "type": "command",
      "command": "whichkey.searchBindings"
    },
    {
      "key": ".",
      "name": "Repeat most recent action",
      "type": "command",
      "command": "whichkey.repeatMostRecent"
    },
    {
      "key": "b",
      "name": "+Buffers/Editors",
      "type": "bindings",
      "bindings": [
        {
          "key": "b",
          "name": "Show all buffers/editors",
          "type": "command",
          "command": "workbench.action.showAllEditors"
        },
        {
          "key": "B",
          "name": "Show all buffers/editors in active group",
          "type": "command",
          "command": "workbench.action.showEditorsInActiveGroup"
        },
        {
          "key": "d",
          "name": "Close active editor",
          "type": "command",
          "command": "workbench.action.closeActiveEditor"
        },
        {
          "key": "H",
          "name": "Move editor into left group",
          "type": "command",
          "command": "workbench.action.moveEditorToLeftGroup"
        },
        {
          "key": "J",
          "name": "Move editor into below group",
          "type": "command",
          "command": "workbench.action.moveEditorToBelowGroup"
        },
        {
          "key": "K",
          "name": "Move editor into above group",
          "type": "command",
          "command": "workbench.action.moveEditorToAboveGroup"
        },
        {
          "key": "L",
          "name": "Move editor into right group",
          "type": "command",
          "command": "workbench.action.moveEditorToRightGroup"
        },
        {
          "key": "n",
          "name": "Next editor",
          "type": "command",
          "command": "workbench.action.nextEditor"
        },
        {
          "key": "p",
          "name": "Previous editor",
          "type": "command",
          "command": "workbench.action.previousEditor"
        },
        {
          "key": "N",
          "name": "New untitled editor",
          "type": "command",
          "command": "workbench.action.files.newUntitledFile"
        },
        {
          "key": "u",
          "name": "Reopen closed editor",
          "type": "command",
          "command": "workbench.action.reopenClosedEditor"
        },
        {
          "key": "P",
          "name": "Paste clipboard to buffer",
          "type": "commands",
          "commands": [
            "editor.action.selectAll",
            "editor.action.clipboardPasteAction"
          ]
        },
        {
          "key": "Y",
          "name": "Copy buffer to clipboard",
          "type": "commands",
          "commands": [
            "editor.action.selectAll",
            "editor.action.clipboardCopyAction",
            "cancelSelection"
          ]
        }
      ]
    },
    {
      "key": "k",
      "name": "Show all keybindings in [keyboard shortcuts]",
      "type": "command",
      "command": "workbench.action.openGlobalKeybindings"
    },
    {
      "key": "f",
      "name": "+File",
      "type": "bindings",
      "bindings": [
        {
          "key": "f",
          "name": "Open file/folder",
          "type": "command",
          "command": "whichkey.openFile"
        },
        {
          "key": "n",
          "name": "New Untitled",
          "type": "command",
          "command": "workbench.action.files.newUntitledFile"
        },
        {
          "key": "w",
          "name": "Open active in new window",
          "type": "command",
          "command": "workbench.action.files.showOpenedFileInNewWindow"
        },
        {
          "key": "s",
          "name": "Save file",
          "type": "command",
          "command": "workbench.action.files.save"
        },
        {
          "key": "S",
          "name": "Save all files",
          "type": "command",
          "command": "workbench.action.files.saveAll"
        },
        {
          "key": "o",
          "name": "Open recent",
          "type": "command",
          "command": "workbench.action.openRecent"
        },
        {
          "key": "R",
          "name": "Rename file",
          "type": "commands",
          "commands": [
            "workbench.files.action.showActiveFileInExplorer",
            "renameFile"
          ]
        },
        {
          "key": "t",
          "name": "Show tree/explorer view",
          "type": "command",
          "command": "workbench.view.explorer"
        },
        {
          "key": "T",
          "name": "Show active file in tree/explorer view",
          "type": "command",
          "command": "workbench.files.action.showActiveFileInExplorer"
        },
        {
          "key": "y",
          "name": "Copy path of active file",
          "type": "command",
          "command": "workbench.action.files.copyPathOfActiveFile"
        },
        {
          "key": "o",
          "name": "Open with",
          "type": "command",
          "command": "explorer.openWith"
        },
        {
          "key": "l",
          "name": "Change file language",
          "type": "command",
          "command": "workbench.action.editor.changeLanguageMode"
        }
      ]
    },
    {
      "key": "G",
      "name": "+Git",
      "type": "bindings",
      "bindings": [
        {
          "key": "g",
          "name": "Show source control (git diff)",
          "type": "command",
          "command": "workbench.view.scm"
        },
        {
          "key": "b",
          "name": "Accept both",
          "type": "command",
          "command": "merge-conflict.accept.both"
        },
        {
          "key": "c",
          "name": "Accept current",
          "type": "command",
          "command": "merge-conflict.accept.current"
        },
        {
          "key": "i",
          "name": "Accept incoming",
          "type": "command",
          "command": "merge-conflict.accept.incoming"
        },
        {
          "key": "B",
          "name": "Accept all both",
          "type": "command",
          "command": "merge-conflict.accept.all-both"
        },
        {
          "key": "C",
          "name": "Accept all current",
          "type": "command",
          "command": "merge-conflict.accept.all-current"
        },
        {
          "key": "I",
          "name": "Accept all incoming",
          "type": "command",
          "command": "merge-conflict.accept.all-incoming"
        },
        {
          "key": "k",
          "name": "Compare current conflict",
          "type": "command",
          "command": "merge-conflict.compare"
        },
        {
          "key": "n",
          "name": "Next Conflict",
          "type": "command",
          "command": "merge-conflict.next"
        },
        {
          "key": "N",
          "name": "Previous Conflict",
          "type": "command",
          "command": "merge-conflict.previous"
        }
      ]
    },
    {
      "key": "g",
      "name": "+Go",
      "type": "bindings",
      "bindings": [
        {
          "key": "f",
          "name": "search file",
          "type": "command",
          "command": "workbench.action.quickOpen"
        }
      ]
    },
    {
      "key": "y", // ‰æãÂ¶ÇÊîæÂú® 'y' (Yank) ÈîÆ‰∏ã
      "name": "+Copy",
      "type": "bindings",
      "bindings": [
        {
          "key": "p",
          "name": "Copy relative file path",
          "type": "command",
          "command": "copyRelativeFilePath"
        }
      ]
    },
    {
      "key": "p",
      "name": "+Project",
      "type": "bindings",
      "bindings": [
        {
          "key": "f",
          "name": "Find file in project",
          "type": "command",
          "command": "workbench.action.quickOpen"
        },
        {
          "key": "p",
          "name": "Switch project",
          "type": "command",
          "command": "workbench.action.openRecent"
        },
        {
          "key": "t",
          "name": "Show tree/explorer view",
          "type": "command",
          "command": "workbench.view.explorer"
        }
      ]
    },
    {
      "key": "s",
      "name": "Search in a project",
      "type": "command",
      "command": "workbench.action.findInFiles"
    },
    {
      "key": "S",
      "name": "+Show",
      "type": "bindings",
      "bindings": [
        {
          "key": "e",
          "name": "Show explorer",
          "type": "command",
          "command": "workbench.view.explorer"
        },
        {
          "key": "s",
          "name": "Show search",
          "type": "command",
          "command": "workbench.view.search"
        },
        {
          "key": "g",
          "name": "Show source control",
          "type": "command",
          "command": "workbench.view.scm"
        },
        {
          "key": "r",
          "name": "Show remote explorer",
          "type": "command",
          "command": "workbench.view.remote"
        },
        {
          "key": "x",
          "name": "Show extensions",
          "type": "command",
          "command": "workbench.view.extensions"
        },
        {
          "key": "t",
          "name": "Show terminal",
          "type": "command",
          "command": "workbench.action.terminal.toggleTerminal"
        }
      ]
    },
    {
      "key": "t",
      "name": "+Tabs operation",
      "type": "bindings",
      "bindings": [
        {
          "key": "x",
          "name": "View: Close Other Editors in Group",
          "type": "command",
          "command": "workbench.action.closeOtherEditors"
        },
        {
          "key": "X",
          "name": "View: Reopen Closed Editor",
          "type": "command",
          "command": "workbench.action.reopenClosedEditor"
        }
      ]
    },
    {
      "key": "w",
      "name": "+Window",
      "type": "bindings",
      "bindings": [
        {
          "key": "l",
          "name": "Split editor right",
          "type": "command",
          "command": "workbench.action.splitEditor"
        },
        {
          "key": "k",
          "name": "Split editor below",
          "type": "command",
          "command": "workbench.action.splitEditorDown"
        },
        {
          "key": "J",
          "name": "Move editor left",
          "type": "command",
          "command": "workbench.action.focusPreviousGroup"
        },
        {
          "key": "K",
          "name": "Move editor down",
          "type": "command",
          "command": "workbench.action.focusBelowGroup"
        },
        {
          "key": "I",
          "name": "Move editor up",
          "type": "command",
          "command": "workbench.action.focusAboveGroup"
        },
        {
          "key": "L",
          "name": "Move editor right",
          "type": "command",
          "command": "workbench.action.focusNextGroup"
        },
        {
          "key": "z",
          "name": "Combine all editors",
          "type": "command",
          "command": "workbench.action.joinAllGroups"
        },
        {
          "key": "d",
          "name": "Close editor group",
          "type": "command",
          "command": "workbench.action.closeEditorsInGroup"
        },
        {
          "key": "x",
          "name": "Close all editor groups",
          "type": "command",
          "command": "workbench.action.closeAllGroups"
        }
      ]
    },
    {
      "key": "c",
      "name": "Comment Or Close",
      "type": "bindings",
      "bindings": [
        {
          // Defines a binding accessible via 'c' then 'p'
          // comment and paste
          "key": "p",
          // Describes the overall action in the WhichKey menu
          // Goal: Transform selected lines like:
          //   aa                  // aa
          //   bb       ->         // bb
          //                       aa
          //                       bb
          // And finally, exit selection/visual mode.
          "name": "Comment and duplicate selection below",
          "type": "commands",
          "commands": [
            "editor.action.addCommentLine",
            "editor.action.copyLinesDownAction",
            "editor.action.removeCommentLine",
            "cancelSelection" // Add this command
          ]
        },
        {
          "key": "t",
          "name": "Close all editor groups",
          "type": "command",
          "command": "workbench.action.closeOtherEditors"
        }
      ]
    },
    {
      "key": "C",
      "name": "+Cursor",
      "type": "bindings",
      "bindings": [
        {
          "key": "q",
          "name": "Quick edit with selection",
          "type": "command",
          "command": "aipopup.action.modal.generate"
        },
        {
          "key": "i",
          "name": "Insert selection into chat",
          "type": "command",
          "command": "aichat.insertselectionintochat"
        },
        {
          "key": "n",
          "name": "New chat",
          "type": "command",
          "command": "composer.newAgentChat"
        },
        {
          "key": "c",
          "name": "Close chat",
          "type": "command",
          "command": "aichat.close-sidebar"
        },
        {
          "key": "f",
          "name": "Quick fix",
          "type": "command",
          "command": "editor.action.quickFix"
        },
        {
          "key": "s",
          "name": "Show chat history",
          "type": "command",
          "command": "composer.showComposerHistory"
        }
      ]
    },
    {
      "key": "1",
      "name": "Focus first editor group",
      "type": "command",
      "command": "workbench.action.focusFirstEditorGroup"
    },
    {
      "key": "2",
      "name": "Focus second editor group",
      "type": "command",
      "command": "workbench.action.focusSecondEditorGroup"
    },
    {
      "key": "r",
      "name": "Rename symbol",
      "type": "command",
      "command": "editor.action.rename"
    }
  ]
}
